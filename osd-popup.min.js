// Initialize timer displays
function initializeTimerDisplays() {
    // Check for existing popup timer
    const popupRemainingTime = getRemainingTime('popup');
    if (popupRemainingTime !== null) {
        if (popupRemainingTime > 0) {
            timeLeft = popupRemainingTime;
            
            if (discPopCONFIG.debugMode) {
                console.log(`Resumed popup timer with ${timeLeft} seconds remaining`);
            }
        } else {
            // Timer expired, handle cleanup
            timeLeft = 0;
            if (discPopCONFIG.autoDisableCoupon.enabled && discPopCONFIG.autoDisableCoupon.onPopupTimerZero) {
                disableCouponElements('popup-timer-zero');
            }
        }
    } else {
        // No existing timer, use default
        timeLeft = getPopupCountdownTime();
    }
    
    // Check for existing checkout timer
    const checkoutRemainingTime = getRemainingTime('checkout');
    if (checkoutRemainingTime !== null) {
        if (checkoutRemainingTime > 0) {
            checkoutTimeLeft = checkoutRemainingTime;
            
            // If checkout timer exists, show it and mark as copied
            isCopied = true;
            showCheckoutTimer();
            
            if (discPopCONFIG.debugMode) {
                console.log(`Resumed checkout timer with ${checkoutTimeLeft} seconds remaining`);
            }
        } else {
            // Timer expired, handle cleanup
            checkoutTimeLeft = 0;
            if (discPopCONFIG.autoDisableCoupon.enabled && discPopCONFIG.autoDisableCoupon.onCheckoutTimerZero) {
                disableCouponElements('checkout-timer-zero');
            }
            if (shouldClearCouponOnZero()) {
                clearCouponOnZero();
            }
        }
    } else {
        // No existing timer, use default
        checkoutTimeLeft = getCheckoutCountdownTime();
    }
    
    // Initialize displays
    const timeDisplay = document.getElementById('timeDisplay');
    if (timeDisplay) {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    const checkoutTimeDisplay = document.getElementById('checkoutTimeDisplay');
    if (checkoutTimeDisplay) {
        const minutes = Math.floor(checkoutTimeLeft / 60);
        const seconds = checkoutTimeLeft % 60;
        checkoutTimeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

// Function to calculate and store timer end time
function setTimerEndTime(timerType, durationInSeconds) {
    const now = new Date().getTime();
    const endTime = now + (durationInSeconds * 1000);
    localStorage.setItem(`${timerType}EndTime`, endTime.toString());
    
    if (discPopCONFIG.debugMode) {
        console.log(`${timerType} timer end time set:`, new Date(endTime));
    }
    
    return endTime;
}

// Function to get remaining time for a timer
function getRemainingTime(timerType) {
    const endTimeStr = localStorage.getItem(`${timerType}EndTime`);
    if (!endTimeStr) return null;
    
    const endTime = parseInt(endTimeStr);
    const now = new Date().getTime();
    const remainingMs = endTime - now;
    
    if (remainingMs <= 0) {
        // Timer has expired, clean up
        localStorage.removeItem(`${timerType}EndTime`);
        return 0;
    }
    
    return Math.ceil(remainingMs / 1000); // Return remaining seconds
}

// Function to clear timer end time
function clearTimerEndTime(timerType) {
    localStorage.removeItem(`${timerType}EndTime`);
    
    if (discPopCONFIG.debugMode) {
        console.log(`${timerType} timer end time cleared`);
    }
}

function getPopupCountdownTime() {
    const popup = discPopCONFIG.countdown.popup;
    return (popup.minutes || 0) * 60 + (popup.seconds || 0);
}

function getCheckoutCountdownTime() {
    const topNotif = discPopCONFIG.countdown.checkoutTimer;
    return (topNotif.minutes || 0) * 60 + (topNotif.seconds || 0);
}

function getPopupWarningThreshold() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.popup && discPopCONFIG.countdown.popup.warningThreshold !== undefined) {
        const threshold = discPopCONFIG.countdown.popup.warningThreshold;
        
        // Check if it's the new object format {minutes: X, seconds: Y}
        if (typeof threshold === 'object' && threshold !== null) {
            const minutes = threshold.minutes || 0;
            const seconds = threshold.seconds || 0;
            return minutes * 60 + seconds;
        }
        
        // Backward compatibility - direct seconds value
        if (typeof threshold === 'number') {
            return threshold;
        }
    }
    return 120;
}

function getCheckoutTimerWarningThreshold() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.checkoutTimer && discPopCONFIG.countdown.checkoutTimer.warningThreshold !== undefined) {
        const threshold = discPopCONFIG.countdown.checkoutTimer.warningThreshold;
        
        // Check if it's the new object format {minutes: X, seconds: Y}
        if (typeof threshold === 'object' && threshold !== null) {
            const minutes = threshold.minutes || 0;
            const seconds = threshold.seconds || 0;
            return minutes * 60 + seconds;
        }
        
        // Backward compatibility - direct seconds value
        if (typeof threshold === 'number') {
            return threshold;
        }
    }
    return 180;
}

function getPopupUrgentThreshold() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.popup && discPopCONFIG.countdown.popup.urgentThreshold !== undefined) {
        const threshold = discPopCONFIG.countdown.popup.urgentThreshold;
        
        // Check if it's the new object format {minutes: X, seconds: Y}
        if (typeof threshold === 'object' && threshold !== null) {
            const minutes = threshold.minutes || 0;
            const seconds = threshold.seconds || 0;
            return minutes * 60 + seconds;
        }
        
        // Backward compatibility - direct seconds value
        if (typeof threshold === 'number') {
            return threshold;
        }
    }
    return 60;
}

function getCheckoutTimerUrgentThreshold() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.checkoutTimer && discPopCONFIG.countdown.checkoutTimer.urgentThreshold !== undefined) {
        const threshold = discPopCONFIG.countdown.checkoutTimer.urgentThreshold;
        
        // Check if it's the new object format {minutes: X, seconds: Y}
        if (typeof threshold === 'object' && threshold !== null) {
            const minutes = threshold.minutes || 0;
            const seconds = threshold.seconds || 0;
            return minutes * 60 + seconds;
        }
        
        // Backward compatibility - direct seconds value
        if (typeof threshold === 'number') {
            return threshold;
        }
    }
    return 60;
}

function shouldAutoClosePopupOnZero() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.popup && discPopCONFIG.countdown.popup.autoCloseOnZero !== undefined) {
        return discPopCONFIG.countdown.popup.autoCloseOnZero;
    }
    return true;
}

function shouldAutoHideCheckoutTimerOnZero() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.checkoutTimer && discPopCONFIG.countdown.checkoutTimer.autoHideOnZero !== undefined) {
        return discPopCONFIG.countdown.checkoutTimer.autoHideOnZero;
    }
    return discPopCONFIG.checkoutTimer?.autoHide !== false;
}

function shouldClearCouponOnZero() {
    if (discPopCONFIG.countdown && discPopCONFIG.countdown.checkoutTimer && discPopCONFIG.countdown.checkoutTimer.clearCouponOnZero !== undefined) {
        return discPopCONFIG.countdown.checkoutTimer.clearCouponOnZero;
    }
    return true;
}

function initializeTimerConfiguration() {
    if (discPopCONFIG.debugMode) {
        const formatTime = (seconds) => {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            if (minutes > 0 && remainingSeconds > 0) {
                return `${minutes}m ${remainingSeconds}s`;
            } else if (minutes > 0) {
                return `${minutes}m`;
            } else {
                return `${remainingSeconds}s`;
            }
        };
        
        console.log('Timer Configuration Loaded:', {
            popup: {
                totalTime: formatTime(getPopupCountdownTime()),
                warningThreshold: formatTime(getPopupWarningThreshold()),
                urgentThreshold: formatTime(getPopupUrgentThreshold()),
                autoClose: shouldAutoClosePopupOnZero()
            },
            checkoutTimer: {
                totalTime: formatTime(getCheckoutCountdownTime()),
                warningThreshold: formatTime(getCheckoutTimerWarningThreshold()),
                urgentThreshold: formatTime(getCheckoutTimerUrgentThreshold()),
                autoHide: shouldAutoHideCheckoutTimerOnZero(),
                clearCoupon: shouldClearCouponOnZero()
            }
        });
        
        const popupTime = getPopupCountdownTime();
        const popupWarning = getPopupWarningThreshold();
        const popupUrgent = getPopupUrgentThreshold();
        const checkoutTime = getCheckoutCountdownTime();
        const topNotifWarning = getCheckoutTimerWarningThreshold();
        const topNotifUrgent = getCheckoutTimerUrgentThreshold();
        
        if (popupWarning >= popupTime) {
            console.warn('⚠️ WARNING: Popup warning threshold should be less than total popup time');
        }
        
        if (popupUrgent >= popupWarning) {
            console.warn('⚠️ WARNING: Popup urgent threshold should be less than warning threshold');
        }
        
        if (topNotifWarning >= checkoutTime) {
            console.warn('⚠️ WARNING: Checkout timer warning threshold should be less than total notification time');
        }
        
        if (topNotifUrgent >= topNotifWarning) {
            console.warn('⚠️ WARNING: Checkout timer urgent threshold should be less than warning threshold');
        }
    }
    
    timeLeft = getPopupCountdownTime();
    checkoutTimeLeft = getCheckoutCountdownTime();
}

// Global variables
let countdownTimer;
let checkoutTimerInterval;
let timeLeft = getPopupCountdownTime();
let checkoutTimeLeft = getCheckoutCountdownTime(); 
let isTimerPaused = false;
let isCopied = false;

// NEW: Tracking variables for triggers
let popupTriggered = false;
let exitIntentListener = null;
let scrollListener = null;
let intersectionObserver = null;
let delayTimer = null;

// Utility function to detect device type
function isMobileDevice() {
    return window.innerWidth <= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// Check if trigger should work on current device
function shouldTriggerOnDevice(trigger) {
    const isMobile = isMobileDevice();
    return isMobile ? trigger.mobile : trigger.desktop;
}

// Initialize popup content with discPopCONFIG values
function initializePopupContent() {
    // Set popup scale with responsive support
    if (discPopCONFIG.popupScale) {
        const popup = document.querySelector('.coupon-popup');
        let scaleValue;
        
        if (typeof discPopCONFIG.popupScale === 'object') {
            // Responsive scaling
            const screenWidth = window.innerWidth;
            if (screenWidth <= 480) {
                scaleValue = discPopCONFIG.popupScale.mobile || 0.9;
            } else if (screenWidth <= 768) {
                scaleValue = discPopCONFIG.popupScale.tablet || 1.0;
            } else {
                scaleValue = discPopCONFIG.popupScale.desktop || 1.1;
            }
        } else {
            // Single value scaling (backward compatible)
            scaleValue = discPopCONFIG.popupScale;
        }
        
        if (scaleValue !== 1) {
            popup.style.setProperty('--popup-scale', scaleValue);
        }
        
        if (discPopCONFIG.debugMode) {
            console.log(`Popup scale set to: ${scaleValue} (screen: ${window.innerWidth}px)`);
        }
    }

    // Set checkout timer scale with responsive support
    if (discPopCONFIG.checkoutTimerScale) {
        const checkoutTimer = document.querySelector('.checkout-timer');
        if (!checkoutTimer) return; // Exit if element doesn't exist yet
        
        let scaleValue;
        
        if (typeof discPopCONFIG.checkoutTimerScale === 'object') {
            // Responsive scaling
            const screenWidth = window.innerWidth;
            if (screenWidth <= 480) {
                scaleValue = discPopCONFIG.checkoutTimerScale.mobile || 0.9;
            } else if (screenWidth <= 768) {
                scaleValue = discPopCONFIG.checkoutTimerScale.tablet || 0.95;
            } else {
                scaleValue = discPopCONFIG.checkoutTimerScale.desktop || 1.0;
            }
        } else {
            // Single value scaling (backward compatible)
            scaleValue = discPopCONFIG.checkoutTimerScale;
        }
        
        checkoutTimer.style.setProperty('--checkout-timer-scale', scaleValue);
        
        if (discPopCONFIG.debugMode) {
            console.log(`Checkout timer scale set to: ${scaleValue} (screen: ${window.innerWidth}px)`);
        }
    }

    // Set checkout timer position, offset and text
    if (discPopCONFIG.checkoutTimer) {
        const checkoutTimer = document.querySelector('.checkout-timer');
        if (checkoutTimer) {
            // Set position class
            const position = discPopCONFIG.checkoutTimer.position || 'top';
            checkoutTimer.classList.remove('position-top', 'position-bottom');
            checkoutTimer.classList.add(`position-${position}`);
            
            // Set offset distance
            const offset = discPopCONFIG.checkoutTimer.offsetDistance || 20;
            checkoutTimer.style.setProperty('--notification-offset', `${offset}px`);

            // Set notification message text
            const notificationTextElement = document.getElementById('checkoutTimerText');
            if (notificationTextElement && discPopCONFIG.checkoutTimer.message) {
                notificationTextElement.textContent = discPopCONFIG.checkoutTimer.message;
            }
            
            if (discPopCONFIG.debugMode) {
                console.log(`Checkout timer positioned: ${position} with ${offset}px offset`);
            }
        }
    }
    
    // Update popup title
    const titleElement = document.querySelector('.popup-title');
    if (titleElement) {
        titleElement.innerHTML = discPopCONFIG.coupon.title;
    }
    
    // Update popup subtitle with discount replacement
    const subtitleElement = document.querySelector('.popup-subtitle');
    if (subtitleElement) {
        let subtitleText = discPopCONFIG.coupon.subtitle;
        subtitleText = subtitleText.replace('{discount}', discPopCONFIG.coupon.discount);
        subtitleElement.innerHTML = subtitleText;
    }
    
    // Update coupon code
    const couponCodeElement = document.getElementById('kod-kupon');
    if (couponCodeElement) {
        couponCodeElement.textContent = discPopCONFIG.coupon.code;
    }
    
    // Update copy message
    const copyMessageElement = document.getElementById('copyMessage');
    if (copyMessageElement) {
        copyMessageElement.innerHTML = discPopCONFIG.coupon.copyMessage;
    }
    
    // Update copy button text
    const copyButtonElement = document.getElementById('copyButton');
    if (copyButtonElement) {
        copyButtonElement.textContent = discPopCONFIG.coupon.copyButtonText;
    }
    
    if (discPopCONFIG.debugMode) console.log('Popup content initialized with discPopCONFIG values');
}

// Handle window resize for responsive scaling
function handleWindowResize() {
    if (typeof discPopCONFIG.popupScale === 'object' || typeof discPopCONFIG.checkoutTimerScale === 'object') {
        initializePopupContent(); // Reinitialize with new scale
    }
}

// Add resize listener
window.addEventListener('resize', handleWindowResize);

// Check if enough days have passed since last popup show
function shouldShowPopup() {
    if (discPopCONFIG.showIntervalDays === 0) {
        return true;
    }
    
    const lastShownTimestamp = localStorage.getItem('couponPopupLastShown');
    if (!lastShownTimestamp) {
        return true;
    }
    
    const lastShownDate = new Date(parseInt(lastShownTimestamp));
    const currentDate = new Date();
    const daysDifference = Math.floor((currentDate - lastShownDate) / (1000 * 60 * 60 * 24));
    
    if (discPopCONFIG.debugMode) {
        console.log(`Days since last shown: ${daysDifference}, Required interval: ${discPopCONFIG.showIntervalDays}`);
    }
    
    return daysDifference >= discPopCONFIG.showIntervalDays;
}

// Exit Intent Detection
function setupExitIntentTrigger() {
    if (!discPopCONFIG.triggers.exitIntent.enabled || !shouldTriggerOnDevice(discPopCONFIG.triggers.exitIntent)) {
        return;
    }
    
    let exitIntentTriggered = false;
    
    exitIntentListener = function(e) {
        if (exitIntentTriggered || popupTriggered) return;
        
        // Check if mouse is moving toward top of screen
        if (e.clientY <= discPopCONFIG.triggers.exitIntent.sensitivity && e.movementY < 0) {
            exitIntentTriggered = true;
            triggerPopup('exit-intent');
        }
    };
    
    document.addEventListener('mouseleave', function(e) {
        if (exitIntentTriggered || popupTriggered) return;
        
        // Check if mouse left through top of document
        if (e.clientY <= 0) {
            exitIntentTriggered = true;
            triggerPopup('exit-intent');
        }
    });
    
    document.addEventListener('mousemove', exitIntentListener);
    
    if (discPopCONFIG.debugMode) console.log('Exit intent trigger set up');
}

// Scroll-based Trigger
function setupScrollTrigger() {
    if (!discPopCONFIG.triggers.scroll.enabled || !shouldTriggerOnDevice(discPopCONFIG.triggers.scroll)) {
        return;
    }
    
    // Get device-specific percentage
    const isMobile = isMobileDevice();
    let targetPercentage;
    
    if (typeof discPopCONFIG.triggers.scroll.percentage === 'object') {
        // New format
        targetPercentage = isMobile ? 
            discPopCONFIG.triggers.scroll.percentage.mobile : 
            discPopCONFIG.triggers.scroll.percentage.desktop;
    } else {
        // Legacy format (backward compatibility)
        targetPercentage = discPopCONFIG.triggers.scroll.percentage;
    }
    
    scrollListener = function() {
        if (popupTriggered) return;
        
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const documentHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrollPercentage = (scrollTop / documentHeight) * 100;
        
        if (scrollPercentage >= targetPercentage) {
            triggerPopup('scroll');
        }
    };
    
    window.addEventListener('scroll', scrollListener);
    
    if (discPopCONFIG.debugMode) {
        console.log(`Scroll trigger set up (${targetPercentage}% on ${isMobile ? 'mobile' : 'desktop'})`);
    }
}

// ID-based Trigger using Intersection Observer
function setupIdBasedTrigger() {
    if (!discPopCONFIG.triggers.idBased.enabled || !shouldTriggerOnDevice(discPopCONFIG.triggers.idBased)) {
        return;
    }
    
    const targetElement = document.getElementById(discPopCONFIG.triggers.idBased.targetId);
    if (!targetElement) {
        if (discPopCONFIG.debugMode) console.log(`Target element #${discPopCONFIG.triggers.idBased.targetId} not found`);
        return;
    }
    
    // Set up intersection observer
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: discPopCONFIG.triggers.idBased.triggerPosition === 'top' ? 0.1 : 
                   discPopCONFIG.triggers.idBased.triggerPosition === 'bottom' ? 0.9 : 0.5
    };
    
    intersectionObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting && !popupTriggered) {
                triggerPopup('id-based');
            }
        });
    }, observerOptions);
    
    intersectionObserver.observe(targetElement);
    
    if (discPopCONFIG.debugMode) console.log(`ID-based trigger set up for #${discPopCONFIG.triggers.idBased.targetId}`);
}

// Delay-based Trigger
function setupDelayTrigger() {
    if (!discPopCONFIG.triggers.delay.enabled || !shouldTriggerOnDevice(discPopCONFIG.triggers.delay)) {
        return;
    }
    
    delayTimer = setTimeout(() => {
        if (!popupTriggered) {
            triggerPopup('delay');
        }
    }, discPopCONFIG.triggers.delay.seconds * 1000);
    
    if (discPopCONFIG.debugMode) console.log(`Delay trigger set up (${discPopCONFIG.triggers.delay.seconds}s)`);
}

// NEW: Universal trigger function
function triggerPopup(triggerType) {
    if (popupTriggered || !shouldShowPopup()) {
        return;
    }
    
    popupTriggered = true;
    
    if (discPopCONFIG.debugMode) console.log(`Popup triggered by: ${triggerType}`);
    
    // Set timer end time when popup is triggered (only if no existing timer)
    if (!localStorage.getItem('popupEndTime')) {
        setTimerEndTime('popup', getPopupCountdownTime());
    }
    
    showCouponPopup();
    startCountdown();
    
    // Clean up listeners to prevent multiple triggers
    cleanupTriggers();
}

// NEW: Clean up all trigger listeners
function cleanupTriggers() {
    if (exitIntentListener) {
        document.removeEventListener('mousemove', exitIntentListener);
    }
    
    if (scrollListener) {
        window.removeEventListener('scroll', scrollListener);
    }
    
    if (intersectionObserver) {
        intersectionObserver.disconnect();
    }
    
    if (delayTimer) {
        clearTimeout(delayTimer);
    }
}

// Function to disable coupon elements
function disableCouponElements(reason = 'timer') {
    if (!discPopCONFIG.autoDisableCoupon.enabled) {
        return;
    }
    
    const config = discPopCONFIG.autoDisableCoupon;
    
    setTimeout(() => {
        // Disable coupon input field
        const couponField = document.querySelector('input[name="coupon_code"]');
        if (couponField) {
            if (config.disableMethod === 'disable' || config.disableMethod === 'both') {
                couponField.disabled = true;
                couponField.classList.add('coupon-disabled');
            }
            
            if (config.disableMethod === 'hide' || config.disableMethod === 'both') {
                couponField.style.display = 'none';
            }
        }
        
        // Disable coupon claim button after a delay
        const couponButton = document.querySelector('#coupon_claim');
        if (couponButton) {
            if (config.disableMethod === 'disable' || config.disableMethod === 'both') {
                couponButton.disabled = true;
                couponButton.classList.add('coupon-disabled');
                couponButton.onclick = function(e) {
                    e.preventDefault();
                    return false;
                };
            }
            
            if (config.disableMethod === 'hide' || config.disableMethod === 'both') {
                couponButton.style.display = 'none';
            }
        }

        // Show appropriate disable message
        if (config.showDisableMessage) {
            const isIntervalDisable = reason === 'interval-restriction';
            showDisableMessage(isIntervalDisable);
        }

        // Store timer expiry timestamp for interval tracking
        if (reason === 'popup-timer-zero' || reason === 'checkout-timer-zero') {
            const currentTimestamp = new Date().getTime();
            localStorage.setItem('couponTimerExpired', currentTimestamp.toString());
        }
        
        if (discPopCONFIG.debugMode) {
            console.log(`Coupon elements disabled due to: ${reason}`);
        }
    }, 500);
}

// Function to show disable message
function showDisableMessage(isIntervalDisable = false) {
    const config = discPopCONFIG.autoDisableCoupon;
    
    // Remove existing message if any
    const existingMessage = document.getElementById('couponDisabledMessage');
    if (existingMessage) {
        existingMessage.remove();
    }
    
    // Create and show new message
    const messageElement = document.createElement('div');
    messageElement.id = 'couponDisabledMessage';
    
    // Use appropriate message based on disable reason
    messageElement.textContent = isIntervalDisable ? 
        config.intervalDisableMessage : 
        config.disableMessage;
    
    // Insert message near coupon elements
    const couponButton = document.querySelector('#coupon_claim');
    if (couponButton && couponButton.parentNode) {
        couponButton.parentNode.insertBefore(messageElement, couponButton.nextSibling);
    } else {
        // Fallback: append to body
        document.body.appendChild(messageElement);
    }
}

// Function to hide disable message
function hideDisableMessage() {
    const existingMessage = document.getElementById('couponDisabledMessage');
    if (existingMessage) {
        existingMessage.remove();
    }
}

// Check if coupon should be disabled based on interval
function shouldDisableCouponByInterval() {
    if (!discPopCONFIG.autoDisableCoupon.enabled || !discPopCONFIG.autoDisableCoupon.maintainDisabledUntilInterval) {
        return false;
    }
    
    if (discPopCONFIG.showIntervalDays === 0) {
        return false; // No interval restriction
    }
    
    // Check if popup was ever shown and timer expired
    const popupShownTimestamp = localStorage.getItem('couponPopupLastShown');
    const timerExpiredTimestamp = localStorage.getItem('couponTimerExpired');
    
    if (!popupShownTimestamp || !timerExpiredTimestamp) {
        return false; // No previous popup or timer expiry
    }
    
    // Check if enough days have passed since timer expired
    const timerExpiredDate = new Date(parseInt(timerExpiredTimestamp));
    const currentDate = new Date();
    const daysDifference = Math.floor((currentDate - timerExpiredDate) / (1000 * 60 * 60 * 24));
    
    return daysDifference < discPopCONFIG.showIntervalDays;
}

// Check and disable on page load
function checkAndDisableOnPageLoad() {
    if (shouldDisableCouponByInterval()) {
        disableCouponElements('interval-restriction');
        
        if (discPopCONFIG.debugMode) {
            const timerExpiredTimestamp = localStorage.getItem('couponTimerExpired');
            const timerExpiredDate = new Date(parseInt(timerExpiredTimestamp));
            const daysSinceExpiry = Math.floor((new Date() - timerExpiredDate) / (1000 * 60 * 60 * 24));
            console.log(`Coupon disabled by interval restriction. Days since expiry: ${daysSinceExpiry}/${discPopCONFIG.showIntervalDays}`);
        }
    }
}

// Initialize popup system with new triggers
function initPopupSystem() {
    // Initialize popup content first
    initializePopupContent();
    initializeTimerDisplays();
    
    // Check and disable coupon if interval hasn't passed
    checkAndDisableOnPageLoad();

    // Check if there's an active popup timer
    const popupRemainingTime = getRemainingTime('popup');
    if (popupRemainingTime !== null && popupRemainingTime > 0) {
        // Resume popup display
        showCouponPopup();
        startCountdown();
        popupTriggered = true;
        
        if (discPopCONFIG.debugMode) {
            console.log('Resumed active popup timer on page load');
        }
        return;
    }

    // Check if popup should be shown based on configured interval
    if (!shouldShowPopup()) {
        if (discPopCONFIG.debugMode) {
            console.log(`Popup not shown - waiting for ${discPopCONFIG.showIntervalDays} day(s) interval`);
        }
        return;
    }
    
    // Set up all enabled triggers
    setupExitIntentTrigger();
    setupScrollTrigger();
    setupIdBasedTrigger();
    setupDelayTrigger();
    
    if (discPopCONFIG.debugMode) {
        console.log('Popup system initialized with triggers:', 
            Object.entries(discPopCONFIG.triggers)
                .filter(([key, trigger]) => trigger.enabled && shouldTriggerOnDevice(trigger))
                .map(([key]) => key)
        );
    }
}

// Show popup
function showCouponPopup() {
    const popup = document.getElementById('couponPopup');
    popup.classList.add('show');
    
    // Save timestamp when popup is shown (only if interval is set)
    if (discPopCONFIG.showIntervalDays > 0) {
        const currentTimestamp = new Date().getTime();
        localStorage.setItem('couponPopupLastShown', currentTimestamp.toString());
    }
    
    if (discPopCONFIG.debugMode) console.log('Popup shown');
}

// Close popup
function closeCouponPopup() {
    const popup = document.getElementById('couponPopup');
    popup.classList.remove('show');
    
    // Clear timer
    if (countdownTimer) {
        clearInterval(countdownTimer);
        countdownTimer = null;
    }
    
    // Clear popup timer end time when manually closed
    clearTimerEndTime('popup');
    
    // Clean up triggers when popup is closed
    cleanupTriggers();
    
    if (discPopCONFIG.debugMode) console.log('Popup closed');
}

// Show checkout timer (updated function)
function showCheckoutTimer() {
    const checkoutTimer = document.getElementById('checkoutTimer');
    checkoutTimer.classList.add('show');
    
    // Start checkout timer
    startCheckoutTimer();
    
    if (discPopCONFIG.debugMode) console.log('Checkout timer shown');
}

// Hide checkout timer (updated function)
function hideCheckoutTimer() {
    const checkoutTimer = document.getElementById('checkoutTimer');
    checkoutTimer.classList.remove('show');
    
    // Clear timer with proper variable name
    if (checkoutTimerInterval) {
        clearInterval(checkoutTimerInterval);
        checkoutTimerInterval = null;
    }
    
    // Clear checkout timer end time when manually hidden
    clearTimerEndTime('checkout');
    
    if (discPopCONFIG.debugMode) console.log('Checkout timer hidden');
}

// Start checkout timer (updated function)
function startCheckoutTimer() {
    const checkoutTimeDisplay = document.getElementById('checkoutTimeDisplay');
    const checkoutTimerElement = document.getElementById('checkoutTimer');
    const urgentThreshold = getCheckoutTimerUrgentThreshold();
    const warningThreshold = getCheckoutTimerWarningThreshold();
    
    // Clear any existing timer first
    if (checkoutTimerInterval) {
        clearInterval(checkoutTimerInterval);
    }
    
    // Set checkout timer end time if not already set
    if (!localStorage.getItem('checkoutEndTime')) {
        setTimerEndTime('checkout', getCheckoutCountdownTime());
    }
    
    checkoutTimerInterval = setInterval(() => {
        // Get fresh remaining time from localStorage
        const remainingTime = getRemainingTime('checkout');
        if (remainingTime === null) {
            // Timer was cleared externally, stop
            clearInterval(checkoutTimerInterval);
            checkoutTimerInterval = null;
            return;
        }
        
        checkoutTimeLeft = remainingTime;
        
        if (checkoutTimeLeft <= 0) {
            // Clear the interval IMMEDIATELY to prevent loop
            clearInterval(checkoutTimerInterval);
            checkoutTimerInterval = null;
            clearTimerEndTime('checkout');
            
            // Execute end-of-timer actions
            if (discPopCONFIG.autoDisableCoupon.enabled && discPopCONFIG.autoDisableCoupon.onCheckoutTimerZero) {
                disableCouponElements('checkout-timer-zero');
            }
            if (shouldAutoHideCheckoutTimerOnZero()) {
                hideCheckoutTimer();
            }
            if (shouldClearCouponOnZero()) {
                clearCouponOnZero();
            }
            return;
        }
        
        updateTopTimeDisplay();
        
        // Warning styling logic
        if (checkoutTimeLeft <= warningThreshold && checkoutTimeLeft > urgentThreshold && !checkoutTimerElement.classList.contains('warning')) {
            checkoutTimerElement.classList.add('warning');
            
            if (discPopCONFIG.debugMode) {
                console.log(`Checkout timer entered warning mode at ${checkoutTimeLeft} seconds`);
            }
        }
        
        // Urgency styling based on configured threshold
        if (checkoutTimeLeft <= urgentThreshold && !checkoutTimerElement.classList.contains('urgent')) {
            checkoutTimerElement.classList.remove('warning');
            checkoutTimerElement.classList.add('urgent');
            
            if (discPopCONFIG.debugMode) {
                console.log(`Checkout timer entered urgent mode at ${checkoutTimeLeft} seconds`);
            }
        }
        
    }, 1000);
}

// Function to clear clipboard
function clearClipboard() {
    try {
        // Method 1: Write empty string to clipboard (most reliable)
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText('').then(() => {
                if (discPopCONFIG.debugMode) console.log('Clipboard cleared successfully');
            }).catch(err => {
                if (discPopCONFIG.debugMode) console.log('Failed to clear clipboard:', err);
                // Fallback method
                fallbackClearClipboard();
            });
        } else {
            // Fallback for older browsers or non-secure contexts
            fallbackClearClipboard();
        }
    } catch (error) {
        if (discPopCONFIG.debugMode) console.log('Error clearing clipboard:', error);
    }
}

// Fallback method to clear clipboard
function fallbackClearClipboard() {
    try {
        // Create temporary input with empty value
        const tempInput = document.createElement('input');
        tempInput.value = '';
        document.body.appendChild(tempInput);
        tempInput.select();
        document.execCommand("copy");
        tempInput.remove();
        
        if (discPopCONFIG.debugMode) console.log('Clipboard cleared using fallback method');
    } catch (error) {
        if (discPopCONFIG.debugMode) console.log('Fallback clipboard clear failed:', error);
    }
}

// Clear coupon code when checkout timer timer equal 0
function clearCouponOnZero() {
    clearClipboard();
    const removeCouponValue = document.getElementById('coupon_cancel');
    if (removeCouponValue) {
        removeCouponValue.click();
    }
}

// Start countdown timer
function startCountdown() {
    const timeDisplay = document.getElementById('timeDisplay');
    const countdownElement = document.getElementById('countdownTimer');
    const urgentThreshold = getPopupUrgentThreshold();
    const warningThreshold = getPopupWarningThreshold();

    // Clear any existing timer first
    if (countdownTimer) {
        clearInterval(countdownTimer);
    }
    
    countdownTimer = setInterval(() => {
        if (isTimerPaused) return;
        
        // Get fresh remaining time from localStorage
        const remainingTime = getRemainingTime('popup');
        if (remainingTime === null) {
            // Timer was cleared externally, stop
            clearInterval(countdownTimer);
            countdownTimer = null;
            return;
        }
        
        timeLeft = remainingTime;
        
        if (timeLeft <= 0) {
            clearInterval(countdownTimer);
            countdownTimer = null;
            clearTimerEndTime('popup');
            
            if (discPopCONFIG.autoDisableCoupon.enabled && discPopCONFIG.autoDisableCoupon.onPopupTimerZero) {
                disableCouponElements('popup-timer-zero');
            }
            if (shouldAutoClosePopupOnZero()) {
                closeCouponPopup();
            }
            return;
        }
        
        updateTimeDisplay();
        
        // Warning styling logic
        if (timeLeft <= warningThreshold && timeLeft > urgentThreshold && !countdownElement.classList.contains('warning')) {
            countdownElement.classList.add('warning');
            
            if (discPopCONFIG.debugMode) {
                console.log(`Popup countdown entered warning mode at ${timeLeft} seconds`);
            }
        }
        
        // Urgency styling based on configured threshold
        if (timeLeft <= urgentThreshold && !countdownElement.classList.contains('urgent')) {
            countdownElement.classList.remove('warning');
            countdownElement.classList.add('urgent');
            countdownElement.style.animation = 'pulse 1s infinite';
            
            if (discPopCONFIG.debugMode) {
                console.log(`Popup countdown entered urgent mode at ${timeLeft} seconds`);
            }
        }
        
    }, 1000);
}

// Update time display
function updateTimeDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    const timeDisplay = document.getElementById('timeDisplay');
    
    timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

// Update checkout timer time display
function updateTopTimeDisplay() {
    const minutes = Math.floor(checkoutTimeLeft / 60);
    const seconds = checkoutTimeLeft % 60;
    const checkoutTimeDisplay = document.getElementById('checkoutTimeDisplay');
    
    checkoutTimeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

// Handle copy action
function handleCopyAction() {
    if (isCopied) {
        // If already copied, this is the "Okay" button
        closeCouponPopup();
        autoApplyCoupon();

        // Auto scroll to order form
        setTimeout(() => {
            const orderForm = document.getElementById('order_form');
            if (orderForm) {
                // Wait for lazy loaded content to settle
                let attempts = 0;
                const maxAttempts = 3;
                
                function attemptScroll() {
                    attempts++;
                    
                    // Wait for any lazy images above the target
                    const lazyImages = document.querySelectorAll('img[loading="lazy"], img[data-src], .lazy');
                    const targetTop = orderForm.getBoundingClientRect().top + window.pageYOffset;
                    
                    const relevantImages = Array.from(lazyImages).filter(img => {
                        const imgTop = img.getBoundingClientRect().top + window.pageYOffset;
                        return imgTop < targetTop;
                    });
                    
                    const imagePromises = relevantImages.map(img => {
                        if (img.complete) return Promise.resolve();
                        
                        return new Promise(resolve => {
                            const timeout = setTimeout(resolve, 1000);
                            img.addEventListener('load', () => {
                                clearTimeout(timeout);
                                resolve();
                            }, { once: true });
                        });
                    });
                    
                    Promise.all(imagePromises).then(() => {
                        // Calculate proper scroll position
                        const rect = orderForm.getBoundingClientRect();
                        const absoluteTop = rect.top + window.pageYOffset;
                        
                        // Account for fixed headers
                        const fixedHeaders = document.querySelectorAll('header, .header, .navbar');
                        let headerHeight = 0;
                        fixedHeaders.forEach(header => {
                            const styles = window.getComputedStyle(header);
                            if (styles.position === 'fixed') {
                                headerHeight = Math.max(headerHeight, header.offsetHeight);
                            }
                        });
                        
                        const targetPosition = Math.max(0, absoluteTop - headerHeight - 30);
                        
                        window.scrollTo({
                            top: targetPosition,
                            behavior: 'smooth'
                        });
                        
                        // Verify and retry if needed
                        setTimeout(() => {
                            const newRect = orderForm.getBoundingClientRect();
                            const newTop = newRect.top + window.pageYOffset;
                            const positionChanged = Math.abs(newTop - absoluteTop) > 20;
                            
                            if (positionChanged && attempts < maxAttempts) {
                                if (discPopCONFIG.debugMode) console.log(`Retrying scroll, attempt ${attempts + 1}`);
                                attemptScroll();
                            }
                        }, 1500);
                        
                        if (discPopCONFIG.debugMode) console.log(`Scrolled to order form (attempt ${attempts})`);
                    });
                }
                
                attemptScroll();
            }
        }, 500); // Increased initial delay
        
        // Show checkout timer after a short delay
        setTimeout(() => {
            showCheckoutTimer();
        }, 500);
        
        return;
    }
    
    // Copy the coupon code
    const kuponText = discPopCONFIG.coupon.code;
    const copyMessage = document.getElementById('copyMessage');
    const copyButton = document.getElementById('copyButton');
    const subtitleElement = document.getElementById('popupSubtitle');
    
    // Pause timer
    isTimerPaused = false;
    
    // Copy to clipboard
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(kuponText).then(() => {
            showCopySuccess(copyMessage, copyButton, subtitleElement);
        }).catch(() => {
            fallbackCopyMethod(kuponText, copyMessage, copyButton, subtitleElement);
        });
    } else {
        fallbackCopyMethod(kuponText, copyMessage, copyButton, subtitleElement);
    }
}

// Automatically apply coupon
function autoApplyCoupon() {
    const couponCode = discPopCONFIG.coupon.code;

    // Wait a moment for the coupon section to be visible (especially on mobile)
    setTimeout(() => {
        // Find the coupon input field
        const couponInput = document.querySelector('input[name="coupon_code"]');
        if (couponInput) {
            // Clear any existing value and paste the coupon code
            couponInput.value = '';
            couponInput.value = couponCode;
            
            // Trigger input events to ensure the form recognizes the value
            couponInput.dispatchEvent(new Event('input', { bubbles: true }));
            couponInput.dispatchEvent(new Event('change', { bubbles: true }));
            
            // Wait a moment then click the apply button
            setTimeout(() => {
                const applyButton = document.getElementById('coupon_claim');
                if (applyButton) {
                    applyButton.click();
                    
                    if (discPopCONFIG.debugMode) console.log('Coupon applied automatically');
                } else {
                    if (discPopCONFIG.debugMode) console.log('Apply coupon button not found');
                }
            }, 100);
            
        } else {
            if (discPopCONFIG.debugMode) console.log('Coupon input field not found');
        }
    }, 300);
}

// Fallback copy method
function fallbackCopyMethod(text, messageElement, buttonElement, subtitleElement) {
    const tempInput = document.createElement('input');
    tempInput.value = text;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    tempInput.remove();
    showCopySuccess(messageElement, buttonElement, subtitleElement);
}

// Show copy success and change button
function showCopySuccess(messageElement, buttonElement, subtitleElement) {
    isCopied = true;
    
    // Show success message
    messageElement.classList.add('show');

    // Hide subtitle
    subtitleElement.classList.add('hide');
    
    // Change button to "Checkout"
    buttonElement.classList.add('checkout-kupon');
    buttonElement.textContent = discPopCONFIG.coupon.checkoutButtonText;
    
    // Set checkout timer when coupon is copied
    setTimerEndTime('checkout', getCheckoutCountdownTime());
    
    if (discPopCONFIG.debugMode) console.log('Coupon copied successfully');
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPopupSystem);
} else {
    initPopupSystem();
}

// Close popup when clicking overlay
document.getElementById('couponPopup').addEventListener('click', function(e) {
    if (e.target === this) {
        closeCouponPopup();
        disableCouponElements('clicking-overlay');
    }
});

// Close popup with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        closeCouponPopup();
        disableCouponElements('push-escape-key');
    }
});
